build:
  box: busybox
  steps:
    - script:
        name: noop
        code: echo "Building app"
        
        
fn-build-java:
   box:
      id: fnproject/fn-java-fdk-build:1.0.55
   steps:
     - script:
         name: build java
         code: |
          cd ${FUNC_NAME}
          mvn  package  dependency:copy-dependencies -DincludeScope=runtime -DskipTests=true -Dmdep.prependGroupId=true -DoutputDirectory=target
          mkdir -p ${WERCKER_OUTPUT_DIR}/
          cp target/*.jar ${WERCKER_OUTPUT_DIR}/
          function parse_yaml {
            local prefix=$2
            local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
            sed -ne "s|^\($s\):|\1|" \
                  -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
                  -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
            awk -F$fs '{
                indent = length($1)/2;
                vname[indent] = $2;
                for (i in vname) {if (i > indent) {delete vname[i]}}
                if (length($3) > 0) {
                  vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                  printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
                }
            }'
          }
          parse_yaml func.yaml > ${WERCKER_OUTPUT_DIR}/funcvars.sh
fn-push-java:
   box:
      id: fnproject/fn-java-fdk:1.0.55
      entrypoint: /bin/sh -c /bin/bash
   steps:
     - script:
            name: copy artifacts
            code: | 
              mkdir -p /function/app/
              mv *.jar /function/app/
              source funcvars.sh
              echo "Pushing function version: ${version}"
              echo "cmd: ${cmd}"
     - internal/docker-push:
            repository: ${DOCKER_REPO}/${FUNC_NAME}
            username: ${DOCKER_USERNAME}
            password: ${DOCKER_PASSWORD}
            tag: $version
            entrypoint: /usr/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=2 -XX:+UseSerialGC -Xshare:on -cp /function/app/*:/function/runtime/* com.fnproject.fn.runtime.EntryPoint
            cmd: ${cmd}


fn-route-update:
   box: oraclelinux:7-slim
   steps:
     - script:
         name: update route
         code: |
          cat funcvars.sh
          source funcvars.sh
          echo "Updating route ${FN_APP} /${FUNC_NAME} to ${DOCKER_REPO}/${FUNC_NAME}:${version}"
          curl -L -o ./fn https://github.com/fnproject/cli/releases/download/0.4.17/fn_linux
          chmod +x ./fn
          export API_URL=${FN_SERVER}
          ./fn apps create ${FN_APP} && echo "Creating app '${FN_APP}' if it doesn't exist."
          if !(./fn routes update ${FN_APP} /${FUNC_NAME} --image ${DOCKER_REPO}/${FUNC_NAME}:${version}) ; then
             ./fn routes create  ${FN_APP} /${FUNC_NAME} --image ${DOCKER_REPO}/${FUNC_NAME}:${version}
          fi


